# # Напишите функцию print_operation_table(operation, num_rows, num_columns), 
# # которая принимает в качестве аргумента функцию, 
# # вычисляющую элемент по номеру строки и столбца. По умолчанию номер столбца и строки = 9.

# # Аргументы num_rows и num_columns указывают число строк и столбцов таблицы, 
# # которые должны быть распечатаны.

# # Нумерация строк и столбцов идет с единицы (подумайте, почему не с нуля).

# # Если строк меньше двух, выдайте текст
# # ОШИБКА! Размерности таблицы должны быть больше 2!.

# # Примечание: бинарной операцией называется любая операция, 
# # у которой ровно два аргумента, как, например, у операции умножения.

# # Между элементами должен быть 1 пробел, в конце строки пробел не нужен.



# def print_operation_table(operation, numRows=9, numColumns=9):
#     arr = []
#     if numRows < 2:
#         print('ОШИБКА! Размерности таблицы должны быть больше 2!')
        
#     else:
#         for row in range(1, numRows+1):
#             for column in range(1, numColumns+1):
#                 #print(operation(row,column), end =' ')
#                 arr.append(operation(row,column))
#             print(*arr)
#             arr.clear()

# print_operation_table(lambda x, y: x * y, 3, 3)


# Винни-Пух попросил Вас посмотреть, есть ли в его стихах ритм. 
# Поскольку разобраться в его кричалках не настолько просто, насколько легко он их придумывает, 
# Вам стоит написать программу.

# Винни-Пух считает, что ритм есть, если число слогов 
# (т.е. число гласных букв) в каждой фразе стихотворения одинаковое.
# Фраза может состоять из одного слова, если во фразе несколько слов, 
# то они разделяются дефисами.
# Фразы отделяются друг от друга пробелами.

# Стихотворение  Винни-Пух передаст вам автоматически в переменную stroka в виде строки. 
# В ответе напишите Парам пам-пам, если с ритмом все в порядке и Пам парам, 
# если с ритмом все не в порядке.
# Если фраза только одна, то ритм определить не получится и необходимо вывести: 
# Количество фраз должно быть больше одной!.

stroka = 'пара-ра-рам рам-пам-папам па-ра-па-дам'

# find = 'аеёиоуыэюяAEIOUY'

# print(stroka.count('а'))

# stroka_1 = stroka.split()
# arr = []
# for i in stroka_1:
#     for j in i:
#         if j in find.lower():
#             arr.append(j)
    

# print(arr)

stroki = stroka.split()
 
lst = [sum(x in 'уеыаоэяию' for x in lin)
    for lin in stroki]
if len(set(lst)) == 1 :
    res = "Парам пам-пам"  
else: res = "Пам парам"
 
print(res)

    

    
